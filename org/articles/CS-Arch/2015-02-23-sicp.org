#+BEGIN_HTML
---
date: 2015-02-23 23:38:42
template: tech.jade
title: SICP 笔记
category: CS-Arch
chage_frequency: monthly
tag: CS-Arch
---
#+END_HTML
#+OPTIONS: toc:nil
#+TOC: headlines 2

SICP 分为5章，分别讲解了计算机程序设计的几个方面：
- 过程抽象
- 数据抽象
- 模块化——对象和流以及状态
- 元语言抽象
- 编译器构造

*** 抽象
抽象是将普遍知识与具体知识相隔离的方法，使得抽象后的普遍知识具有通用性，不依赖于具体实现。

处理 *复杂问题* 的最佳方法就是抽象，认识事物的关键方法就是尽可能地减少对其中细节的关注。

你会发现，处在计算机中的每一层，都可以发现你不清楚的细节——下一层的抽象，所以不要陷入细节中，这样会无休止的深入下去，使你失去问题的焦点。

学会用抽象的方式分析、解决问题。

*** 系统健壮性 —— robust
对小的改动不敏感，小的方案调整只需要做小的改动。

比将问题分解为子问题逐个解决的方式更有效的方式是：
发明一种针对系统的特定语言表述系统，当方案发生变化的时候，在语言之上做小的调整。

*** 分层
分层的思想是抽象的一种应用，分层是逻辑上的，每一层对于上一层提供基本的操作，同时借助下一层提供的基本操作实现本层的语义。

分层使得层与层之间的界面清晰，每个层能够独立实现。

每个层都提供了系统的某个视图——某种层面的抽象，如果修改系统进行扩展和调整，可以选择在任何一层完成，因此分层抽象使得系统更加强健。

*** 数据抽象的要点
数据抽象是指将数据的表示与数据的操作分离，数据的定义就是数据的操作的集合，这些操作还应该满足一定的规则。

数据的表示是数据抽象的具体实现，可以有很多种，而数据的使用方只需要使用数据的操作函数，无需关心这些实现。

数据抽象通常是提供数据构造和数据选择这两种接口，数据构造用于生产数据对象，而数据选择接口用于选取数据对象的局部组成。

处理抽象数据可以定义通用接口，通用操作接口不关心数据的具体类型，却能够兼容任意多的数据类型，实现方式是基于数据类型的分派，

分派有2种方法：
- 采用数据驱动的设计 :: 数据表示方需要注册数据的操作函数到表格，分派函数根据表格进行分派。
- 采用消息传递的设计 :: 将数据看作对象，而将操作看作发给数据的消息。此种实现是将数据对象实现为一个过程——而非数据。

数据抽象的设计过程是，将需要的数据表现先假设存在，然后基于这些假设设计数据的操作，这样延迟了数据表现具体的实现，使得一开始不必专注与具体表现，而在设计完成后根据需要选择具体表示。

将数据的处理，看作是一系列操作的串接，这是一个通用的处理范型：map是一个变换，filter是一个过滤，accumulate是累积。
这一区分使得程序结构清晰。

*** 数据的类型
数据的类型引入后，数据的类型之间存在某种关系，如子类型，利用这种关系，可以实现转换，然后数据可以执行更广泛的操作，但是现实的复杂性是这种关系的非线性，而是网状的，如何合理的划分类型，一直没有很好的解决。

*** Lisp 的优势
Lisp的优势是使用了具有 *闭包* 特点的数据表现形式——列表来表示数据，这使得它构造和操作复杂数据变的非常简单，因为通过构造的复合数据还是合法的复合数据。

*** 符号数据
符号数据有别于”值“数据，符号数据是语法上面的数据，而值数据是语义上面的数据，符号数据的引入为语言元编程提供了基础，使得程序能够理解和处理程序本身。

支持符号后，替换将变得不总是成立。

支持符号，可以看到程序和数据之间的界限变得模糊。

*** 过程抽象
使用高阶函数，可以完成更加高级的抽象，更加通用。

*** 递归
递归是程序设计非常直观和简便的方式，而在使用递归数据结构的时候更是如此。

递归的过程可以通过转化为尾部递归的方式消除栈溢出的问题，使得递归使用的空间是固定的，如同迭代一样。

递归的函数需要收敛于一个终结点。

执行递归的方式有2种，一种是展开代换，一种是求值后代入，它们个有优势。


*** 有状态的对象和过程
问题是会带来时间性，程序的输出与历史有关。进而在并发环境种带来同步问题，解决同步问题的一个方法是使用内存屏障。
