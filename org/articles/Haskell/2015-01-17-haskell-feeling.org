#+BEGIN_HTML
---
date: 2015-01-17 21:34:47
template: tech.jade
title: 学习Haskell感想
category: Haskell
chage_frequency: monthly
tag: Haskell
---
#+END_HTML
#+OPTIONS: toc:nil
#+TOC: headlines 2
这几天在坚持学习Haskell，书是先看了《Real World Haskell》，感觉实践的东西较多，基础涉及的较少，于是决定找个从基础来学习的书，毕竟基础的东西才是这个语言的要义所在，不容忽略。

其实最好的方式是看官网的Document或者Toturial等，全面而且原滋原味，可惜担心太多内容，没有经理坚持下去。

在知呼上面提问，几个Haskell大牛说有一本很基础的《Haskell 趣学指南》已经有中文版，但是我找到了英文版，就坚持看完！

全书14章，每章几个主题，每个主题一个大Page，每次看一个主题，就咬牙看完它，有时真的一个Page的内容很多，要看很久，于是常常就看到深夜了！

Haskell的学习不像别的语言，新的东西非常多，可以说是全新的，而且遇到很多类似数学的感觉，有时还需要手动推导一下，才能理解！

里面的东西，能理解的最好理解，要记忆的东西的却不多，尽量不要靠记忆，如果是记忆，说明你还没有理解它。

- 静态类型 :: 类型是确定的，在编译器即可由编译器进行check，确保类型错误都能发现
- 类型推导 :: 可以进行自动类型推导，几乎是不需要明确标注类型的，这有非常大的优势
- Lazy eval :: 惰性求值，将求值推迟到最后，不得不做的时候，这有很多好处（自己想），据说Haskell不会stackOverflow。
- IO Action :: IO 操作和纯函数分离，haskell坚持函数的无side-effect，所以对于产生副作用的函数和操作，有专门的typeclass来标注
- typeclass :: 类似其它语言的interface吧，定义一种通用的抽象操作
- Functor :: 定义了fmap操作，进行变换
- Applicative :: 在Functor的基础上定义 typeClass 之间的操作，unpack 和 pack
- Monad :: 在Functor的基础上定义 typeClass 之间的链式处理

Monad 在学习之前一直听说是Haskell一个非常闪亮的点，这次学习下来，发现一些编程方式在Monad的规则下会变得简单和简洁，少些冗长的代码，然后能将逻辑串接起来。其它的高级特点还有待慢慢了解！


在差不多学习完成后，打算找一些实际的例子进行学习解决实际问题的方式，并打算用一个无论大小的应用去应用在工作上！

然后，还有几个主题需要去了解：

- 并发程序设计 :: 使用haskell进行并发编程，还有一本书是专门将这个的
- 实践能力提升 :: 如何优雅的haskell编程

*目标* 要成为一个熟练掌握的FP语言！

Keep hunting !
