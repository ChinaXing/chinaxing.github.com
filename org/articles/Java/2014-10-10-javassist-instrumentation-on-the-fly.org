#+BEGIN_HTML
---
date : 2014-10-10 21:05:33
template: tech.jade
title: 使用javassist和Jvm Instrumentation运行时增强Java类
category: Java
chage_frequency: monthly
tag: Java,instrument
---
#+END_HTML
#+OPTIONS: toc:nil
#+TOC: headlines 2
** Jvm Instrumentation

Jvm 提供了Instrumentation机制，允许在类加载时进行对类的增强，以及在运行时对已经加载的类进行增强。

+ 类增强 :: 叫做Instrumentation。具体的方式就是对类的byteCode进行转换
  + 类加载时进行增强发生在ClassLoader加载类的之前。
  + 运行时进行增强通过调用Instrument接口提供的retrasnformClasses和redefineCLasses触发。
  其中，对已有类的增强需要满足一定的约束，保证类的 *schema* 不变
  
  实现Instrumentation的入口是通过Jvm提供的java agent机制，将agent jar加载进Jvm，并自动调用约定的agentmain或者premain方法

+ AttachAPI :: 对于运行中的Jvm，可以通过Jvm提供的Attach API，通过编程的方式将java agent jar加载进目标Jvm。

[[2014-09-24-instrumentation.html][Instrumentation的简单介绍]] 

** 字节码增强

为了实现更改类方法字节码，可以通过第三方库，比较容易使用的如javassist包，以及比较底层的asm库等。

[[http://www.javassist.org][javassist]] 包提供了非常便捷的使用，修改方法名，对方法的body进行更改，替换，before/after的插入源代码block。

** 方法体增强

通过javassist库，可以使用如下的代码，将一段java源代码，插入到方法体的开头：
#+BEGIN_SRC java :eval no
            System.out.println("begin transform => " + className);
            ClassPool classPool = ClassPool.getDefault();
            CtClass ctClass = classPool.get(this.className);
            CtMethod ctMethod = ctClass.getDeclaredMethod(methodName);
            ctMethod.insertBefore(enhanceCode);
            System.out.println("transform ok !");
            return ctClass.toBytecode();
#+END_SRC
这里的 *CtMethod.insertBefore* 作用是将java代码插入到方法体的最前面，类似的方法还有 *insertAfter* 等。

这样我们就可以将一段代码插入到一个方法中，比如：修改对象属性、执行特定方法、打印debug信息等等。

** 运行时方法增强工具

通过结合以上的知识点和技术，可以开发一个工具，完成对运行中的Jvm进行指定方法注入java代码，实现动态修改运行中对象等目的。可以说是功能非常强大，可做的事情非常多：
+ 插入一段debug代码，辅助问题诊断，可以代替Btrace的部分功能
+ 插入修改对象属性和状态的代码，动态更改对象的属性和状态，实现一种动态开关
+ 插入return 语句，实现短路某些方法或者mock某些场景的目的

为此，需要实现两个工具：
+ Agent :: 用来执行代码注入，实现为java agent,打包为jar包。
+ Attacher :: 用来将此jar包Load进运行中的jvm，通过Jvm提供的Attach API来实现。

agent的实现可以参见 [[https://github.com/ChinaXing/CnAgent][CnAgent]]

attach实现可以参见 [[https://github.com/ChinaXing/CnJvmAttacher][CnJvmAttacher]]

结合起来使用的方式如：
#+BEGIN_SRC shell :eval no
# target jvm pid = 2099
java -cp .:/usr/lib/jvm/jdk-1.7.0/lib/tools.jar \
     -jar CnJvmAttacher.jar 2099 \
     /root/CnAgent.jar \
    'com.exmaple.ClassA::methodA System.out.println("Hi,Agent");'
#+END_SRC
注意，jvm attach api在jdk的toosl.jar中，需要加入classpath

这样就将 ~System.out.println("Hi,Agent");~ 这句代码插入到了methodA方法的头部，可以在目标jvm的日志中看到一行输出为:
#+BEGIN_QUOTE
Hi,Agent
#+END_QUOTE

** Reference
+ [[http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html#package_description][Java Instrumentation And Agent]]
+ [[http://docs.oracle.com/javase/7/docs/technotes/tools/index.html][Jdk tools]]
+ [[http://javassist.org][javassist]]
+ [[http://asm.ow2.org][asm]]
+ [[http://docs.oracle.com/javase/7/docs/technotes/guides/attach/index.html][Java Attach API]]
+ [[http://www.jcarder.org/manual.html][Jcarder]] -  finding potential deadlocks
+ [[http://jiprof.sourceforge.net][JIP]] - The Java Interactive Profiler 





