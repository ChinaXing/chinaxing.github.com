#+BEGIN_HTML
---
date: 2015-02-23 17:12:31
template: tech.jade
title: Netty 内存管理 —— ByteBuffer
category: Java
chage_frequency: monthly
tag: Java, Netty
---
#+END_HTML
#+OPTIONS: toc:nil
#+TOC: headlines 2

网络编程难免会使用ByteBUffer，Netty中对ByteBuffer自己做了封装，独立与Java Nio的byteBuffer，总的来说，ByteBuffer分为几种：
*** ByteBuffer
**** UnpooledByteBuffer
无缓存，使用过后直接可以被回收
**** PooledByteBUffer
有缓存，使用Recycler进行缓存
**** DirectedByteBuffer
堆外内存。

可以通过使用Jvm参数： =-XXMaxDirectMemorySize=256G= 来设置堆外内存的值，如果未设置，则与堆大小一致。
**** HeapByteBuffer
堆内存
**** UnsafeDirectedByteBuffer
平台相关的堆外内存，在进行相关操作的时候，会判断平台是否支持unsafe操作，如果支持，就使用。

unsafe在sun.misc.unsafe,提供了操作平台底层相关的支持，如内存地址操控。
*** PooledByteBufAllocator
PooledByteBufferAllocator有若干PoolArena组成，它们组成一个数组。

PooledByteBuffer还初始化了一个PoolThreadLocalCache，目标是在PoolArena之上构建一个本地缓冲。

缓存按照对象的大小分为3类：tiny、small、normal。

Arena分为2类：directArena 和 heapArena。优先使用directArena。

**** PoolArena
PoolArena 有若干PoolChunk组成。PoolChunk在PoolArena内以PoolChunkList的形式组成，采用类似buddy系统的设计，不同剩余量的内存被组织在不同的PoolChunkList中。

Arena在分配的时候优先使用参数中传递过来的cache进行分配，如果分配失败，才create Chunk，然后在Chunk上面执行分配，分配完成后将Chunk放入合适的ChunkList（根据其使用率）。

PoolArena默认值是根据系统的资源计算出来的，在Allocator初始化完成后，它不会增加。

每个ThreadPoolLocalCache都在初始化的时候轮询按序选择一个PoolArena作为自己分配和操作的PoolArena。
**** PoolChunk
Chunk是一段连续的内存页面，Chunk是16M ＝ 8k ^ 11 ，每个page的大小默认是8k。

Chunk有2种：DirectChunk和HeapChunk。

chunk的内存组织成memoryMap，每个map的index对应于一个内存页面—— 待定？

Chunk依赖了java的Nio的ByteBuf。
**** PoolChunkList
使用过的Chunk组成了List链表，ChunkList上的分配就是在这个链表上面分配，如果分配成功，那么当前chunk要根据使用率进行调整来移动到合适的其它ChunkList。

ChunkList 本身也组成了链表，按照使用率的顺序。
**** ThreadPoolLocalCache
这是非常主要的一个类，它实现缓存，将对象组织成内部的3类缓存：tiny、small都是小鱼一个Page或者远远小鱼一个Chunk的，normal是接近但是小鱼Chunk的。

ThreadPoolLocaleCache关联了一个PoolArena，这在其ThreadLocal.initValue()方法中完成。

在分配的时候，根据所需大小进行选择缓存队列分配。

使用缓存必须预先填充缓存，否则缓存为空。这个类有一个add方法将Chunk加入到缓存。

缓存还有一个参数，控制产期未被重新分配的空闲节点的清理，这保证了Chunk虽然被缓存，但是不会无限制停留，过一段时间就会被释放，对于内存的使用是合理的。

ThreadPoolLocalCache会监控本Thread的退出，如果退出，要清理掉缓存的Chunk。
*** UnpooledByteBufAllocator
比较简单，直接使用Java nio 中bytebuf的方法
**** UnpooledDirectByteBuf
直接使用： =ByteBuffer.allocateDirect(initialCapacity)=
**** UnpooledHeapByteBuf
直接使用： =new byte[initialCapacity]= 
