#+BEGIN_HTML
---
date: 2015-02-23 17:12:31
template: tech.jade
title: Netty 内存管理 —— ByteBuffer
category: Java
chage_frequency: monthly
tag: Java, Netty
---
#+END_HTML
#+OPTIONS: toc:nil
#+TOC: headlines 2

网络编程难免会使用ByteBUffer，Netty中对ByteBuffer自己做了封装，独立与Java Nio的byteBuffer，总的来说，ByteBuffer分为几种：
*** ByteBuffer
**** UnpooledByteBuffer
无缓存，使用过后直接可以被回收
**** PooledByteBUffer
有缓存，使用Recycler进行缓存
**** DirectedByteBuffer
堆外内存。

可以通过使用Jvm参数： =-XXMaxDirectMemorySize=256G= 来设置堆外内存的值，如果未设置，则与堆大小一致。
**** HeapByteBuffer
堆内存
**** UnsafeDirectedByteBuffer
平台相关的堆外内存，在进行相关操作的时候，会判断平台是否支持unsafe操作，如果支持，就使用。

unsafe在sun.misc.unsafe,提供了操作平台底层相关的支持，如内存地址操控。
*** PooledByteBufAllocator
PooledByteBufferAllocator有若干PoolArena组成，它们组成一个数组。

PooledByteBuffer还初始化了一个PoolThreadLocalCache，目标是在PoolArena之上构建一个本地缓冲。

缓存按照对象的大小分为3类：tiny、small、normal。

Arena分为2类：directArena 和 heapArena。优先使用directArena。

**** PoolArena
PoolArena 有若干PoolChunk组成。PoolChunk在PoolArena内以PoolChunkList的形式组成，采用类似buddy系统的设计，不同剩余量的内存被组织在不同的PoolChunkList中。

Arena在分配的时候优先使用参数中传递过来的cache进行分配，如果分配失败，才create Chunk，然后在Chunk上面执行分配，分配完成后将Chunk放入合适的ChunkList（根据其使用率）。

PoolArena默认值是根据系统的资源计算出来的，在Allocator初始化完成后，它不会增加。

每个ThreadPoolLocalCache都在初始化的时候轮询按序选择一个PoolArena作为自己分配和操作的PoolArena。
**** PoolChunk
Chunk是一段连续的内存页面，Chunk是16M ＝ 8k ^ 11 ，每个page的大小默认是8k。

Chunk有2种：DirectChunk和HeapChunk。

chunk的内存组织成memoryMap，每个map的index对应于一个内存页面—— 待定？

Chunk依赖了java的Nio的ByteBuf。
**** PoolChunkList
使用过的Chunk组成了List链表，ChunkList上的分配就是在这个链表上面分配，如果分配成功，那么当前chunk要根据使用率进行调整来移动到合适的其它ChunkList。

ChunkList 本身也组成了链表，按照使用率的顺序。
**** ThreadPoolLocalCache
这是非常主要的一个类，它实现缓存，将对象组织成内部的3类缓存：tiny、small都是小鱼一个Page或者远远小鱼一个Chunk的，normal是接近但是小鱼Chunk的。

ThreadPoolLocaleCache关联了一个PoolArena，这在其ThreadLocal.initValue()方法中完成。

在分配的时候，根据所需大小进行选择缓存队列分配。

使用缓存必须预先填充缓存，否则缓存为空。这个类有一个add方法将Chunk加入到缓存。

缓存还有一个参数，控制产期未被重新分配的空闲节点的清理，这保证了Chunk虽然被缓存，但是不会无限制停留，过一段时间就会被释放，对于内存的使用是合理的。

ThreadPoolLocalCache会监控本Thread的退出，如果退出，要清理掉缓存的Chunk。
*** UnpooledByteBufAllocator
比较简单，直接使用Java nio 中bytebuf的方法
**** UnpooledDirectByteBuf
直接使用： =ByteBuffer.allocateDirect(initialCapacity)=
**** UnpooledHeapByteBuf
直接使用： =new byte[initialCapacity]= 
*** DirectBuffer的回收
对于heapBuffer，无需当心内存释放回收的问题，因为有GC线程专门负责回收。那么对于DirectBuffer呢？我们申请的是Heap外的内存，自然是gc份外之事，它无法释放。

但是，如果你使用过java 的 directBuffer，其实你并没有主动free你申请的buffer，引入程序员去负责释放内存的工作，是带来内存泄漏的最大原因，所以，DirectBuffer自身完成了这件事情。

在Java中有Reference类，可以使得GC系统和用户之间建立一种协作，概括起来3种Reference的子类，可以将用户处理逻辑hook进入GC的处理逻辑之中，它们是：

- WeakReference
- SoftReference
- PhantomReference

引用类虽然引用了对象，却不会影响对象的回收策略，而仅仅作为旁路逻辑，被GC系统进行通知。

在对象被回收的时候，引用者——referent的Reference们都会被通知到，然后它们被放入一个队列，Reference们有一个线程来监控这个队列，对队列里面的东东进行处理。

拿DirectBuffer来说，它在创建的时候附带了一个Cleaner的类，这个类的操作就是可以free掉这个Buffer对应的内存：
#+BEGIN_SRC java
DirectByteBuffer(int cap) {       
   ...
   ...
   cleaner = Cleaner.create(this, new Deallocator(base, size, cap));
   att = null;
}
private static class Deallocator
        implements Runnable
    {
        ...
        ...
        public void run() {
            if (address == 0) {
                // Paranoia
                return;
            }
            unsafe.freeMemory(address); // free
            address = 0;
            Bits.unreserveMemory(size, capacity);
        }

}
#+END_SRC
Deallocator就是我们要注意的对象，因为free动作触发的地方是关键，它是一个PhantomReference的子类：
#+BEGIN_SRC java
public class Cleaner extends PhantomReference {
...
    private Cleaner(Object var1, Runnable var2) {
        super(var1, dummyQueue);
        this.thunk = var2;
    }

/// PhantomReference
public class PhantomReference<T> extends Reference<T> {
...
    public PhantomReference(T referent, ReferenceQueue<? super T> q) {
        super(referent, q);
    }
#+END_SRC
这一路走来，可以看到这个Reference的referent字段被设置为DirectBuffer。好了关键就看PhantomReference的机制了：
#+BEGIN_SRC java
public abstract class Reference<T> {
...
    private static class ReferenceHandler extends Thread {

        ReferenceHandler(ThreadGroup g, String name) {
            super(g, name);
        }

        public void run() {
            for (;;) {

                Reference r;
                synchronized (lock) {
                    if (pending != null) {
                        r = pending;
                        Reference rn = r.next;
                        pending = (rn == r) ? null : rn;
                        r.next = r;
                    } else {
                        try {
                            lock.wait();
                        } catch (InterruptedException x) { }
                        continue;
                    }
                }

                // Fast path for cleaners
                if (r instanceof Cleaner) { //// <here>
                    ((Cleaner)r).clean();
                    continue;
                }

                ReferenceQueue q = r.queue;
                if (q != ReferenceQueue.NULL) q.enqueue(r);
            }
        }
    }

    static {
        ThreadGroup tg = Thread.currentThread().getThreadGroup();
        for (ThreadGroup tgn = tg;
             tgn != null;
             tg = tgn, tgn = tg.getParent());
        Thread handler = new ReferenceHandler(tg, "Reference Handler");
        /* If there were a special system-only priority greater than
         * MAX_PRIORITY, it would be used here
         */
        handler.setPriority(Thread.MAX_PRIORITY);
        handler.setDaemon(true);
        handler.start();
    }
#+END_SRC
现在明白了，Reference里面有且仅有一个handler线程叫：“Reference Handler“ ：
#+BEGIN_EXAMPLE
"Reference Handler" daemon prio=10 tid=0x00000000086ab800 nid=0x1ed0 in Object.wait() [0x00000000423d5000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000007d8691258> (a java.lang.ref.Reference$Lock)
	at java.lang.Object.wait(Object.java:503)
	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)
	- locked <0x00000007d8691258> (a java.lang.ref.Reference$Lock)

   Locked ownable synchronizers:
	- None
#+END_EXAMPLE
- 检查和处理pending的Reference，将它们加入到创建的时候指定的队列，这样监听队列的线程就可以感知。
- 如果Reference 是Cleaner，则直接执行Cleaner的clean方法，而不放入队列。

由于我们这里使用了Cleaner，所以是第二种情形。

pending 中的Reference是谁放入的 ？ 答案是GC系统——Collector（内部称呼）。这就是bridge ！
