#+begin_html
---
date: 2013-07-07
template: tech.jade
title: Java Spring 框架和java web开发
category: Java
change_frequency: monthly
tag: spring,aop,di,ioc,web
---
#+end_html

本文主要记录我学习java的web开发和spring框架时对一些关键技术和概念的理解与记录。

=待深入=

** web开发
*** web服务模型
    Web服务模型概括为client/server模型，在server端，又可以有如下的模型：
    #+BEGIN_SRC ditaa :file ~/ChinaXing.org/org/img/web-server-model.png :cmdline -r :eval no-export
      +---------+     +----------------+     +----------------+     +---------------------+
      | reqeust | --> | request parse  | --> | business logic | --> | database / external |
      +---------+     +----------------+     +----------------+     +---------------------+
    #+END_SRC

    #+RESULTS:
    [[file:/img/web-server-model.png]]

    - request：一个http/https协议的请求
    - 请求分析处理：\\
      - 根据HTTP/HTTPs协议获取请求的含义，进入具体的执行逻辑
      - 调用具体业务逻辑处理模块的代码获取所需的数据和资源
      - 组装资源，最后生成HTTP响应给客户端      
    - 业务逻辑处理\\
      - 业务逻辑通常与具体的业务系统相关
      - 如果与周边系统相关，可能会进行RPC调用
    - 数据库和外部系统调用\\
      一般的服务都不仅仅是静态资源的获取，意味着动态内容的生成，这时候就需要从数据库查询或写入数据，或者调用外部系统获取数据。

*** MVC
    MVC 是一种web设计的模式，将web服务拆分为3个模块：M（model），V（view），C（controller）。这种拆分是为了代码重用和解耦，提高灵活性。
    - Model ：代指数据获取，包括从数据库、缓冲系统、文件系统获取数据。
    - View  ：代指展现，包括返回给client的数据格式，html页面的样式和排版等，负责结果的展现。
    - Controller：代指对请求处理和生成响应（数据）的过程，包括请求的解析，获取和计算数据，生成响应数据。

    在MVC的模型下，一个请求的处理过程如下：
    #+BEGIN_SRC ditaa :file ~/ChinaXing.org/org/img/web-mvc-model.png :cmdline -r :eval no-export
                                             +-----------+       +----------------+
                                          -->|   model   |  ---> | business logic |
                                         |   +-----------+       |  cRED          |
    +------------+    +-------------+    |                       +----------------+
    |   request  | -> |  controller | ---|
    +------------+    +-------------+    | 
                                         |   +-----------+
                                          -> |   view    |
                                             +-----------+
    #+END_SRC

    #+RESULTS:
    [[file:/img/web-mvc-model.png]]
    
    - 请求被controller接到
    - controller解析请求的含义
    - 从model获取数据
    - 从view获取展现格式/模板
    - 组装model数据与view生成响应（response）。
    
    业务逻辑代码的最终目标是为请求产生数据，通常作为model的后端。
** web框架
   在今天，web开发离不开web框架，web框架的好坏直接决定了web开发的质量和web服务的质量。
*** 位置与作用
    web 框架是运行于webserver内的一个容器，在这个容器里面运行着webapp。\\
    web框架的作用是为web应用的开发提供一个环境，web应用的开发者只需要对此容易进行配置和使用，便可以完成许多web开发共性的需求，从而让web开发者将精力集中于web应用的开发上来。

    web框架是MVC的实现者，web框架实现了MVC模型，约定了一定的目录结构，用于存放不同类型的文件和资源，web开发者使用web框架就需要遵循这样的约定。

    web框架都完成了哪些功能？
    - 请求的解析
    - 请求交给到具体的controller或具体的处理函数或模块
    - 用户代码执行完成后进行响应的组装生成
    - 发送响应或异常给客户端
    - 访问控制ACL
    - 会话（session）的存取

*** webapp
    web app是运行于web框架中的一段代码或类，实现上web app的代码一般继承web框架的某个类，实现具体的针对性的处理。\\
    web app只关心请求的含义，即请求的业务逻辑层面的处理，通过各种途径和方式取得客户端希望的结果数据，然后返回给web框架。
** Spring 框架
*** spring是什么
    Spring 是一个用java开发的轻量级web框架，使用di和aop技术构建。\\
    spring 可打包为一个jar包，也可以使用其各个子包的形式。
*** 结构
    spring的结构如下：\\
    [[/img/spring_framework.gif]]
*** spring mvc
    spring mvc是对mvc模型的实现其一次请求处理过程如下：\\
    [[/img/spring-mvc-recquest-flow.jpg]]
** DI -- 依赖注入
   依赖注入是一种解耦方法，spring中的依赖注入通过定义XML方式来完成，大体思想是通过在XML中定义类之间的关系（如类A中有一个类B的属性），从而将这种具体的依赖关系剥离在代码外面。\\
   然后在加载类的时候根据XML中的定义，将被依赖类注入到依赖者当中。
*** Dependecy inject
    依赖注入是IoC的一种，对于被注入依赖的模块或者说类，它们只知道一个依赖的super class，而不知道具体被注入了什么实现（super class的子类），所以一部分的执行逻辑的控制权是取决于所注入的依赖的模块的。

*** spring Di
    spring 支持Di，而且是其最大特点。spring的依赖注入通过定义XML实现依赖关系定义。
** Ioc -- 控制反转
*** Inverse of Control
    关于IoC的一个最形象简明的解释是:  "don't call us, we will call you !" 
    
    在传统的程序中控制权都掌握在一个模块或者函数中，IoC的思想就是将这种控制权交与你是用的别的模块或者函数，由它们来决定一段执行逻辑。

** AOP -- 切面编程
AOP 最早提出于1997 年: Gregor Kiczales发表了论文《面向侧面的程序设计》（Aspect Oriented Programming）

AOP 译为面向切面的编程比较合适，这里的切面是指一个切入点，在这个切入点上进行编程，比如一个切入点可以是进入后台管理前，这个切入点上我们可以进行登录认证这个操作（编程）。

*** AOP概念组成
- Joinpoint：拦截点，如某个业务方法。
- Pointcut：Joinpoint的表达式，表示拦截哪些方法。一个Pointcut对应多个Joinpoint。 
- Advice:  要切入的逻辑。
  - Before Advice 在方法前切入。
  - After Advice 在方法后切入，抛出异常时也会切入。
  - After Returning Advice 在方法返回后切入，抛出异常则不会切入。
  - After Throwing Advice 在方法抛出异常时切入。
  - Around Advice 在方法执行前后切入，可以中断或忽略原有流程的执行。
*** AOP的用途
    AOP主要可以用于一些具有公共需求，而与业务逻辑关联性不强的地方，进行解耦合。如：
    - 认证、授权
    - 日志记录
    - 性能监控
    - 缓冲代理
*** AOP的实现方式
    AOP实现上可以通过如下技术进行：
    - 静态字节码生成：编译器切面逻辑进行字节码生成,切入到切入点中。
    - 动态代理：为每个切入点运行期动态生成代理对象，将切面逻辑放于代理对象中。这里使用了java动态代理技术。
    - 动态字节码生成：在运行期目标类加载后，生成被切入类的子类，将切面逻辑放置于此子类中。
    - 自定义类加载器：在运行期目标类加载前，将切入逻辑加入生成的目标字节码中。
    - 字节码转换：在运行期，加载类前进行拦截，将切面逻辑加入。

*** Spring AOP
    Spring框架支持一种AOP实现：方法执行切入。实现的方式是动态代理。动态代理不可用时使用动态字节码生成方式。
*** AspectJ
    AspectJ是一个比较成熟和完善（10多年历史）的AOP实现，支持多种切入点和切入方式，支持通过注解（Annotation）和waever（XML定义）方式进行定义。\\
    AspectJ需要使用专门的编译辅助工具(AJDT)来编译代码。aspectJ编译工具在eclipse里面集成。

** 参考资源
   - DI  : http://www.martinfowler.com/articles/injection.html
   - IoC : http://martinfowler.com/bliki/InversionOfControl.html
