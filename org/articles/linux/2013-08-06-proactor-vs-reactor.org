#+BEGIN_HTML
---
date: 2013-08-06
template: tech.jade
title: 两种IO模式：Proactor与Reactor模式
category: Linux
tag: linux,io
change_frequency: monthly
---
#+END_HTML

IO多路复用模型有两种Proactor与Reactor，两者的区别主要在于IO是同步还是异步。

Proactor比Reactor更高效。

下面是两种模式的请求处理过程：

** 处理过程

*** Proactor
1. client创建要进行的操作，并注册操作完成时的回调处理函数
2. 操作（opration）交由操作系统底层进行处理
3. 处理完成后底层将操作结果和回调函数传给Proactor调度器
4. Proactor调度器进行分发事件，调用具体的回调处理函数。

*** Reactor
1. 对事件进行注册处理函数。
2. client的请求触发底层的事件。
3. Reactor调度器检查事件发生，执行注册的处理函数。


** 区别和联系
*** 区别
   在实现中，Proactor是发出异步IO请求，交由操作系统完成IO请求，然后回调自己。

   而Reactor是查询操作系统，发生事件的时候，自己再对操作系统同步IO请求，完成后再回调注册的处理函数。 

   因此二者的区别在于IO请求是OS来做，还是应用层来做，即异步与同步IO。

   异步IO在windows上比较成熟，支持完善和高效，而在Linux等Unix系列操作系统上支持的不是很好，所以大多以Reactor模式为主。
*** 联系
    涉及到高效IO框架都使用了IO多路复用与基于事件的方式，来将请求的处理过程“交叉化”，并行化，异步化，同时尽量的使用底层OS提供的支持功能来达到高效。

** 参考材料
   - [[https://docs.google.com/file/d/0B8Zm-qV7M9pIclNfdnZwNFNqajg/edit][Proactor]]
   - [[http://www.artima.com/articles/io_design_patterns2.html][Comparing Two High-Performance I/O Design Patterns]]
