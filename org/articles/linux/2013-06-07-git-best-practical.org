#+BEGIN_HTML
---
date: 2013-06-07
template: tech.jade
title: git 使用常见问题解决方法
category: Linux
tag: linux,git
change_frequency: monthly
---
#+END_HTML
#+OPTIONS: toc:nil
#+TOC: headlines 2
*** 查询Ref对应的Commit ID
    #+BEGIN_SRC sh :eval no
    git rev-parse HEAD #查询HEAD对应的commit ID
    #+END_SRC

*** 撤销commit
    #+BEGIN_SRC sh :eval no
    git reset --soft <COMMIT_ID>
    #+END_SRC
    这条命令撤销_COMMIT_ID_之后的所有提交，但保持所有的更改
*** 强制使用远端仓库的内容
    #+BEGIN_SRC sh :eval no
      git reset --hard origin/master
    #+END_SRC
*** 删除tag，并删除远程tag
    #+BEGIN_SRC sh :eval no
    git tag -d <TAG_A>
    git push origin :refs/tags/<TAG_A>
    #+END_SRC
    tag 和branch类似，可以看做一种特殊branch
*** 添加tag，并推送到远程
    #+BEGIN_SRC sh :eval no
    git tag <TAG_A>
    git push --tags
    #+END_SRC
*** 修改上次的commit message
    #+BEGIN_SRC sh :eval no
    git commit --amend
    #+END_SRC
    会跳出一个编辑器，可以编辑上次的commit 信息，然后保存即修改完成
*** 修改上次的commit author
    #+BEGIN_SRC sh :eval no
    git commit --amend --author 'New Author Name <email@address.com>'
    #+END_SRC
*** 删除未跟踪(Untracked)的文件
    #+BEGIN_SRC sh :eval no
    git clean -f
    #+END_SRC
    git clean 删除没有纳入git管理的文件
*** 强制覆盖远程
    #+BEGIN_SRC sh :eval no
    git push --force origin/master
    #+END_SRC
*** merge远程机器commit
    #+BEGIN_SRC sh
      git fetch ssh://root@hosta.com/root/account && git merge FETCH_HEAD    
    #+END_SRC
*** 解决合并产生的冲突
    #+BEGIN_SRC sh
    grep -lr "<<<<<" | xargs git checkout --ours
    #+END_SRC
*** 查看某个文件某个commit的内容
    #+BEGIN_SRC sh
    git cat-file blob 42f70347905ce30435459d3e114f30bb5d3084f4:compile.sh
    #+END_SRC
*** 配置
    - 全局配置文件
      ~/.gitconfig
    - 查看配置
      #+BEGIN_SRC sh :eval no
      git config -l      
      #+END_SRC
    - 开启色彩
      #+BEGIN_SRC sh :eval no
      git config --global  color.ui true
      #+END_SRC
    - diff 颜色
      #+BEGIN_SRC sh :eval no
      git config --global color.diff auto
      #+END_SRC
*** 删除commit 历史
    这里使用新建分支时候的 =--orphan= 选项:
    #+BEGIN_QUOTE
           --orphan <new_branch>
           Create a new orphan branch, named <new_branch>, started from <start_point> and switch to it.
           The first commit made on this new branch will have no parents and it will be the root of a
           new history totally disconnected from all the other branches and commits.
    #+END_QUOTE
    #+BEGIN_SRC 
    git checkout --orphan new_branch
    git add -A 
    git commit -m 'new voyage'
    git branch -D master      # delete master branch
    git branch -m master      # rename this branch to master
    git push -f origin master # replace the remote
    #+END_SRC
